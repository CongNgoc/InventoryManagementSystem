SET SERVEROUTPUT ON;
--MODIFY DATE: 23/06/2020
--MODIFIED BY: NGUYEN NGOC CONG
--DESCRIPTION: CREATE STORE PROCEDURE TO GET INFOMATION FROM USER
CREATE OR REPLACE PROCEDURE get_info_user(v_id_user USERS.USER_ID%TYPE)
AS
  --ROWTYPE is a record in table
  v_user USERS%ROWTYPE;
BEGIN
  SELECT * INTO v_user
  FROM USERS
  WHERE USER_ID = v_id_user;
  
  --PRINT USER INFOMATION
  DBMS_OUTPUT.put_line('USER_ID: ' || v_user.USER_ID);
  DBMS_OUTPUT.put_line('FIRST_NAME: ' || v_user.FIRST_NAME);
  DBMS_OUTPUT.put_line('LAST_NAME: ' || v_user.LAST_NAME);
  DBMS_OUTPUT.put_line('BIRTHDAY: ' || v_user.BIRTHDAY);
  DBMS_OUTPUT.put_line('EMAIL: ' || v_user.EMAIL);
  DBMS_OUTPUT.put_line('PHONE: ' || v_user.PHONE);
  DBMS_OUTPUT.put_line('ACTIVE_FLAG: ' || v_user.ACTIVE_FLAG);
  
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND EXCEPTION!');
     WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('OTHERS EXCEPTION!');
END;

--TEST DATA
EXEC get_info_user(2);

--MODIFY DATE: 23/06/2020
--MODIFIED BY: NGUYEN NGOC CONG
--DESCRIPTION: CREATE FUNCTION TO GET PRODUCT PRICE FROM PRODUCT_INFO_ID 
CREATE OR REPLACE FUNCTION get_product_price(v_product_id PRODUCT_INFO.PRODUCT_INFO_ID%TYPE)
RETURN PRODUCT_INFO.PRICE%TYPE
AS
  v_product_price PRODUCT_INFO.PRICE%TYPE;
BEGIN
  SELECT PRICE INTO v_product_price
  FROM PRODUCT_INFO
  WHERE PRODUCT_INFO_ID = v_product_id AND ACTIVE_FLAG = 1;
  
  RETURN v_product_price;
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND EXCEPTION get_product_price!');
     WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('OTHERS EXCEPTION!');
END;
--EXECUTE
DECLARE
  v_product_price PRODUCT_INFO.PRICE%TYPE;
BEGIN
  v_product_price := get_product_price(1);
  DBMS_OUTPUT.PUT_LINE('v_product_price ' || v_product_price);
END;

--MODIFY DATE: 23/06/2020
--MODIFIED BY: NGUYEN NGOC CONG
--DESCRIPTION: CREATE FUNCTION TO GET INVOICE PRICE
--IF CHECK PRICE = TOTAL(INVOICE_DETAIL)
CREATE OR REPLACE FUNCTION check_invoice_price(v_invoice_id INVOICE.INVOICE_ID%TYPE)
RETURN NUMBER
AS
  v_invoice_price INVOICE.PRICE%TYPE;
  v_total_invoice_de INVOICE.PRICE%TYPE;
  v_product_price PRODUCT_INFO.PRICE%TYPE;

BEGIN
  SELECT PRICE INTO v_invoice_price
  FROM INVOICE
  WHERE INVOICE.INVOICE_ID = v_invoice_id AND ACTIVE_FLAG = 1;
   
  v_total_invoice_de := 0;
  FOR item IN (SELECT PRICE, QUANITY
              FROM INVOICE_DETAIL IND, PRODUCT_INFO PI 
              WHERE INVOICE_ID = v_invoice_id AND IND.ACTIVE_FLAG = 1 AND IND.PRODUCT_ID = PI.PRODUCT_INFO_ID)
  LOOP
    v_total_invoice_de := v_total_invoice_de + item.PRICE * item.QUANITY;
  END LOOP;
  
  IF v_invoice_price = v_total_invoice_de THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;

  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND EXCEPTION!');
     WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('OTHERS EXCEPTION!');
END;

--TEST
DECLARE
  v_res NUMBER;
BEGIN
  v_res := check_invoice_price(4);
  IF v_res = 1 THEN
    DBMS_OUTPUT.PUT_LINE('TRUE');
  ELSE
    DBMS_OUTPUT.PUT_LINE('FALSE');
  END IF;
END;

--TEST DATA
INSERT INTO INVOICE(INVOICE_ID, TYPE, USER_ID, PRICE) VALUES(4,1, 1, 0);
INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(4, 1, 3);
SELECT * FROM INVOICE;
