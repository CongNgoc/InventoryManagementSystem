SET SERVEROUTPUT ON;
--MODIFY DATE: 22/06/2020
--MODIFIED BY: NGUYEN NGOC CONG
--DESCRIPTION: CREATE TRIGGER TO UPDATE PRICE WHEN INSERT INVOICE DETAIL
CREATE OR REPLACE TRIGGER update_price_on_invoice
AFTER INSERT OR UPDATE OR DELETE ON INVOICE_DETAIL
FOR EACH ROW
DECLARE
  price_product PRODUCT_INFO.PRICE%TYPE;
  type_invoice INVOICE.TYPE%TYPE;
  quanity_product PRODUCT_IN_STOCK.QUANITY%TYPE;
BEGIN
  --GET CURRENT PRICE FROM PRODUCT 
  IF(INSERTING) THEN
    SELECT PRICE INTO price_product
    FROM PRODUCT_INFO PI
    WHERE PI.PRODUCT_INFO_ID = :NEW.PRODUCT_ID;
    UPDATE INVOICE 
    SET INVOICE.PRICE = PRICE + price_product*:NEW.QUANITY
    WHERE INVOICE_ID = :NEW.INVOICE_ID;
    
    --CHECK QUANITY WHEN INSERT INVOICE DETAIL(EXPORT: INVOICE.TYPE = 2)
    SELECT QUANITY INTO quanity_product
    FROM PRODUCT_IN_STOCK 
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
    
    SELECT INVOICE.TYPE INTO type_invoice
    FROM INVOICE 
    WHERE INVOICE_ID = :NEW.INVOICE_ID;
  
    IF :NEW.QUANITY > quanity_product OR type_invoice = 2 THEN
      raise_application_error(-20001,'The quantity of goods in stock is not enough for exporting goods.');
    END IF;
    --END CHECK
    
  END IF;
  IF(UPDATING) THEN
    SELECT PRICE INTO price_product
    FROM PRODUCT_INFO PI
    WHERE PI.PRODUCT_INFO_ID = :NEW.PRODUCT_ID;
  
    UPDATE INVOICE 
    SET INVOICE.PRICE = PRICE + price_product*:NEW.QUANITY
    WHERE INVOICE_ID = :NEW.INVOICE_ID;
    
    UPDATE INVOICE 
    SET INVOICE.PRICE = PRICE - price_product*:OLD.QUANITY
    WHERE INVOICE_ID = :OLD.INVOICE_ID;
  END IF;
  IF(DELETING) THEN
    SELECT PRICE INTO price_product
    FROM PRODUCT_INFO PI
    WHERE PI.PRODUCT_INFO_ID = :OLD.PRODUCT_ID;
    UPDATE INVOICE 
    SET INVOICE.PRICE = PRICE - price_product*:OLD.QUANITY
    WHERE INVOICE_ID = :OLD.INVOICE_ID;
  END IF;
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND EXCEPTION!');
     WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('OTHERS EXCEPTION!');
END;
--INSERT INTO INVOICE
INSERT INTO INVOICE(INVOICE_ID,"QLKHO_ADMIN"."INVOICE"."TYPE", USER_ID, PRICE) VALUES(1,2, 1, 0);
--INSERT INTO INVOICE_DETAIL
INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(1, 1, 3);
INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(1, 2, 1);
INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(1, 2, 1);
INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(1, 2, 1);
INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(1, 2, 1);

SELECT * FROM INVOICE;
SELECT * FROM INVOICE_DETAIL;
SELECT * FROM PRODUCT;

DELETE INVOICE_DETAIL
WHERE IN_DE_ID = 3;

--MODIFY DATE: 22/06/2020
--MODIFIED BY: NGUYEN NGOC CONG
--DESCRIPTION: CREATE TRIGGER TO CHECK QUANITY WHEN INSERT INVOICE DETAIL(EXPORT: INVOICE.TYPE = 2)
CREATE OR REPLACE TRIGGER CHECK_QUANITY_FOR_EXPORT
BEFORE INSERT OF QUANITY ON INVOICE_DETAIL
FOR EACH ROW
DECLARE 
  quanity_product PRODUCT_IN_STOCK.QUANITY%TYPE;
  type_invoice INVOICE.TYPE%TYPE;
BEGIN
  SELECT QUANITY INTO quanity_product
  FROM PRODUCT_IN_STOCK 
  WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
  
  SELECT INVOICE.TYPE INTO type_invoice
  FROM INVOICE 
  WHERE INVOICE_ID = :NEW.INVOICE_ID;

  IF :NEW.QUANITY > quanity_product OR type_invoice = 2 THEN
    raise_application_error(-20001,'The quantity of goods in stock is not enough for exporting goods.');
  END IF;
  
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND EXCEPTION!');
     WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('OTHERS EXCEPTION!');
END;



--TEST DATA
INSERT INTO PRODUCT_IN_STOCK(PRODUCT_ID, QUANITY) VALUES (1, 5);
INSERT INTO PRODUCT_IN_STOCK(PRODUCT_ID, QUANITY) VALUES (2, 15);

--INVOICE TYPE = 2 
INSERT INTO INVOICE(INVOICE_ID, TYPE, USER_ID, PRICE) VALUES(3,2, 1, 0);
--INVOICE TYPE = 1 
INSERT INTO INVOICE(INVOICE_ID, TYPE, USER_ID, PRICE) VALUES(2,1, 2, 0);

INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(3, 1, 6);
SELECT * FROM PRODUCT_IN_STOCK;
SELECT * FROM INVOICE;


--MODIFY DATE: 22/06/2020
--MODIFIED BY: NGUYEN NGOC CONG
--DESCRIPTION: CREATE TRIGGER TO MINUS QUANITY WHEN INSERT INVOICE DETAIL(EXPORT: INVOICE.TYPE = 2)
CREATE OR REPLACE TRIGGER MINUS_QUANITY_FOR_EXPORT
BEFORE INSERT ON INVOICE_DETAIL
FOR EACH ROW
DECLARE 
  quanity_product PRODUCT_IN_STOCK.QUANITY%TYPE;
  type_invoice INVOICE.TYPE%TYPE;
BEGIN
  SELECT QUANITY INTO quanity_product
  FROM PRODUCT_IN_STOCK 
  WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
  
  SELECT INVOICE.TYPE INTO type_invoice
  FROM INVOICE 
  WHERE INVOICE_ID = :NEW.INVOICE_ID;
  
  IF type_invoice = 2 THEN
    UPDATE PRODUCT_IN_STOCK
    SET QUANITY = quanity_product - :NEW.QUANITY
    WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
  END IF;
  
  EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('NO_DATA_FOUND EXCEPTION!');
     WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('OTHERS EXCEPTION!');
END;
--TEST DATA
INSERT INTO INVOICE_DETAIL(INVOICE_ID, PRODUCT_ID, QUANITY) VALUES(2, 1, 3);
SELECT * FROM PRODUCT_IN_STOCK;
UPDATE PRODUCT_IN_STOCK
    SET QUANITY = 3
    WHERE PRODUCT_ID = 1;